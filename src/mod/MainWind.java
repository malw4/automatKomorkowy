package mod;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Scanner;

public class MainWind extends JFrame {
    JPanel mainPanel;
    JPanel generalPanel;
    int initialWidth, initialHeight, Z;
    int a, alg, period, mcsteps;
    double kt;

    public MainWind(String title) throws IOException {
        super(title);
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(("im.jpg")));
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            String liczbA = JOptionPane.showInputDialog("Podaj nazwe pliku, z którego chcesz pobrać parametry:", "par6.txt");
            File myObj = new File("../untitled/" + liczbA);
            Scanner myReader = new Scanner(myObj);
            initialWidth = (Integer.parseInt(myReader.nextLine()));
            initialHeight = (Integer.parseInt(myReader.nextLine()));
            Z = (Integer.parseInt(myReader.nextLine()));
            a = (Integer.parseInt(myReader.nextLine()));
            alg = (Integer.parseInt(myReader.nextLine()));
            if (myReader.nextLine().equals("false")) {
                period = 1;
            } else {
                period = 0;
            }
            kt = (Double.parseDouble(myReader.nextLine())) / 10;
            mcsteps = (Integer.parseInt(myReader.nextLine()));
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        JPane canvas = new JPane(image, initialWidth, initialHeight, Z);

        String liczbB = JOptionPane.showInputDialog("Podaj nazwe pliku, do którego chcesz zapisać wyniki wygenerowane:", "gen6.txt");
        String liczbD = JOptionPane.showInputDialog("Podaj nazwe pliku, do którego chcesz zapisać wyniki czasów (plik z .json):", "time.json");
        canvas.writer = new BufferedWriter(new FileWriter(liczbB));
        canvas.MCwrite = new BufferedWriter(new FileWriter("../untitled/mc" + liczbB));
        canvas.Json = new BufferedWriter(new FileWriter("../untitled/" + liczbD));
        canvas.MCJson = new BufferedWriter(new FileWriter("../untitled/mc" + liczbD));
        // =============================================================================================================

        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(BorderLayout.CENTER, canvas);

        generalPanel = new JPanel();
        generalPanel.setPreferredSize(new Dimension(180, 180));

        mainPanel.add(BorderLayout.EAST, generalPanel);
        //==============================================================================================================

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainPanel);

        this.setSize(new Dimension(130, 100));
        this.setLocationRelativeTo(null);

        canvas.zad.generateRandom(a);
        canvas.setAlgorithm(alg);
        canvas.setPeriodic(period != 0);
        System.out.println("Start generating");
        canvas.czyCzasPlynie = true;
        canvas.millisActualTime = System.currentTimeMillis();
        canvas.zad.kt = kt;
        canvas.zad.remainingMCSteps = mcsteps;
        if (mcsteps == 0)
            canvas.val = 1;
    }

    public static void main(String[] args) throws IOException {
        MainWind window = new MainWind("ZIARNA");
        window.setVisible(true);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }
}